
name: Live demo detector fraude wiht database mongo from to storage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  REGISTRY_URL: ghcr.io
  REPOSITORY_NAME: "$GITHUB_REPOSITORY"
  IMAGE_NAME: "live-fraude-demo"
  IMAGE_TAG: "0.0.1"
  REGISTRY_USER_NAME: ""
  CONTAINER_NAME: ""
  APP_PORT: 8080

jobs:
  build_and_push:
    name: Build and Publish to Github Packages Registry
    runs-on: ubuntu-latest

    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
  
      - name: Install Dependencies
        run: npm install

      # - name: Build and Publish API to Github Packages Registry
      #   uses: elgohr/Publish-Docker-Github-Action@master
      #   with:
      #     name: ${{env.REGISTRY_USER_NAME}}/${{env.REPOSITORY_NAME}}/${{env.IMAGE_NAME}}
      #     registry: ${{env.REGISTRY_URL}}
      #     username: ${{ GITHUB_USERNAME }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     dockerfile: ./Dockerfile
      #     tags: ${{env.IMAGE_TAG}}

      # - name: Images Digest
      #   run: echo ${{steps.docker-build.outputs.digest}}
  # deploy:
  #   name: Pull and deploy to VPS server
  #   runs-on: ubuntu-latest
  #   container: node:14
  #   steps:
  #     - name: Login Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{secrets.DOCKER_HUB_USERNAME}}
  #         password: ${{secrets.DOCKER_HUB_ACCES_TOKEN}}
      # - name: Deploy package to OVH VPS
      #   uses: appleboy/ssh-action@master
      #   env:
      #     GITHUB_USERNAME: ${{env.REGISTRY_USER_NAME}}
      #     GITHUB_TOKEN: ${{ secrets. REGISTRY_PWD }}

      #   with:
      #     host: ${{ secrets.HOST }}
      #     port: ${{ secrets.PORT }}
      #     username: ${{ secrets.HOST_USER }}
      #     password: ${{ secrets.PRIVATE_KEY }}
      #     envs: GITHUB_USERNAME, GITHUB_TOKEN
      #     script: |
      #       docker stop $(docker ps -a -q)
      #       docker login ${{env.REGISTRY_URL}} -u $GITHUB_USERNAME -p $GITHUB_TOKEN
      #       docker pull ${{env.REGISTRY_URL}}/${{env.REGISTRY_USER_NAME}}/${{env.REPOSITORY_NAME}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
      #       docker stop ${{env.CONTAINER_NAME}}
      #       docker system prune -f
      #       docker run --name ${{env.CONTAINER_NAME}} --env API_URL="${{env.API_URL}}" -dit -p 127.0.0.1:${{env.APP_PORT}}:80 ${{env.REGISTRY_URL}}/${{env.REGISTRY_USER_NAME}}/${{env.REPOSITORY_NAME}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
