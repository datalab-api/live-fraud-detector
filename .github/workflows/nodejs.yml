
name: Live demo detector fraude wiht database mongo from to storage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  REGISTRY_URL: ghcr.io
  IMAGE_NAME: "live-fraude-demo"
  IMAGE_TAG: "0.0.1"
  REGISTRY_USER_NAME: ""
  CONTAINER_NAME: ""
  APP_PORT: 8080

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#  This workflow contains multiple jobs
  build_test:
#    The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
        
  #  Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    #  Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

    #  install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
          npm ci 
    #  build and test the apps     
      # - name: build
      #   run: |
      #     npm run build
      #     npm run test
  push_to_Docker_Hub:
    #  The type of runner that the job will run on
      runs-on: ubuntu-latest
    #  build docker image and push to docker hub
    #  only if the app build and test successfully
      needs: [build_test]

      steps:
        - name: checkout repo
          uses: actions/checkout@v2

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1
      
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_ACCES_TOKEN }}
      
        - name: Build and push
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          
        - name: Run the image in a container
          uses: addnab/docker-run-action@v3
          with:
            image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
            run: |
              echo "runing the docker image"
              echo "Test
              echo ${{ steps.docker_build.outputs.digest }}
  # deploy:
  #   name: Pull and deploy to VPS server
  #   runs-on: ubuntu-latest
  #   container: node:14
  #   steps:
  #     - name: Login Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{secrets.DOCKER_HUB_USERNAME}}
  #         password: ${{secrets.DOCKER_HUB_ACCES_TOKEN}}
  #     - name: Deploy package to OVH VPS
  #       uses: appleboy/ssh-action@master
  #       env:
  #         GITHUB_USERNAME: ${{env.REGISTRY_USER_NAME}}
  #         GITHUB_TOKEN: ${{ secrets. REGISTRY_PWD }}

  #       with:
  #         host: ${{ secrets.HOST }}
  #         port: ${{ secrets.PORT }}
  #         username: ${{ secrets.HOST_USER }}
  #         password: ${{ secrets.PRIVATE_KEY }}
  #         envs: GITHUB_USERNAME, GITHUB_TOKEN
  #         script: |
  #           docker stop $(docker ps -a -q)
  #           docker login ${{env.REGISTRY_URL}} -u $GITHUB_USERNAME -p $GITHUB_TOKEN
  #           docker pull ${{env.REGISTRY_URL}}/${{env.REGISTRY_USER_NAME}}/${{env.REPOSITORY_NAME}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
  #           docker stop ${{env.CONTAINER_NAME}}
  #           docker system prune -f
  #           docker run --name ${{env.CONTAINER_NAME}} --env API_URL="${{env.API_URL}}" -dit -p 127.0.0.1:${{env.APP_PORT}}:80 ${{env.REGISTRY_URL}}/${{env.REGISTRY_USER_NAME}}/${{env.REPOSITORY_NAME}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
